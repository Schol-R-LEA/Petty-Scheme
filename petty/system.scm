(define-module (petty system)
#:export
  (bind-reconciliations
  word-size passing-seq
  acc stack-pointer frame-pointer
  emit-preamble emit-epilogue
  emit-program-exit
  emit-return
  emit-move
  emit-load emit-load-imm emit-load-address
  emit-store
  emit-arith emit-arith-imm emit-arith-operation
  emit-jump emit-conditional
  emit-push emit-push-mem emit-pop emit-pop-mem
  emit-and emit-and-imm emit-or emit-or-imm emit-xor emit-xor-imm
  emit-not
  emit-shift-left emit-shift-right
  emit-load-local emit-store-local
  emit-load-arg emit-store-arg
  emit-predicate-result emit-comparison-predicate))

(use-modules (petty reconciliations)
             (petty amd64)
             (petty mips32))


(define word-size '())
(define passing-seq '())
(define acc '())
(define stack-pointer '())
(define frame-pointer '())
(define emit-preamble '())
(define emit-epilogue '())
(define emit-program-exit '())
(define emit-return '())
(define emit-move '())
(define emit-load '())
(define emit-load-imm '())
(define emit-load-address  '())
(define emit-store '())
(define emit-arith '())
(define emit-arith-imm '())
(define emit-arith-operation '())
(define emit-jump '())
(define emit-conditional '())
(define emit-push '())
(define emit-push-mem '())
(define emit-pop '())
(define emit-pop-mem '())
(define emit-and '())
(define emit-and-imm '())
(define emit-or '())
(define emit-or-imm '())
(define emit-xor '())
(define emit-xor-imm '())
(define emit-not '())
(define emit-shift-left '())
(define emit-shift-right '())
(define emit-load-local '())
(define emit-store-local '())
(define emit-load-arg '())
(define emit-store-arg '())
(define emit-predicate-result '())
(define emit-comparison-predicate '())


(define (bind-reconciliations isa os)
  (case isa
    ((amd64)
       (set! word-size amd64-word-size)
       (set! passing-seq amd64-passing-seq)
       (set! acc amd64-acc)
       (set! stack-pointer amd64-stack-pointer)
       (set! frame-pointer amd64-frame-pointer)
       (set! emit-preamble amd64-emit-preamble)
       (set! emit-epilogue amd64-emit-epilogue)
       (set! emit-program-exit amd64-emit-program-exit)
       (set! emit-return amd64-emit-return)
       (set! emit-move amd64-emit-move)
       (set! emit-load amd64-emit-load)
       (set! emit-load-imm amd64-emit-load-imm)
       (set! emit-load-address amd64-emit-load-address)
       (set! emit-store amd64-emit-store)
       (set! emit-arith amd64-emit-arith)
       (set! emit-arith-imm amd64-emit-arith-imm)
       (set! emit-arith-operation amd64-emit-arith-operation)
       (set! emit-jump amd64-emit-jump)
       (set! emit-conditional amd64-emit-conditional)
       (set! emit-push amd64-emit-push)
       (set! emit-push-mem amd64-emit-push-mem)
       (set! emit-pop amd64-emit-pop)
       (set! emit-pop-mem amd64-emit-pop-mem)
       (set! emit-and amd64-emit-and)
       (set! emit-and-imm amd64-emit-and-imm)
       (set! emit-or amd64-emit-or)
       (set! emit-or-imm amd64-emit-or-imm)
       (set! emit-xor amd64-emit-xor)
       (set! emit-xor-imm amd64-emit-xor-imm)
       (set! emit-not amd64-emit-not)
       (set! emit-shift-left amd64-emit-shift-left)
       (set! emit-shift-right amd64-emit-shift-right)
       (set! emit-load-local amd64-emit-load-local)
       (set! emit-store-local amd64-emit-store-local)
       (set! emit-load-arg amd64-emit-load-arg)
       (set! emit-store-arg amd64-emit-store-arg)
       (set! emit-predicate-result amd64-emit-predicate-result)
       (set! emit-comparison-predicate amd64-emit-comparison-predicate))
    ((mips32)
       (set! word-size mips32-word-size)
       (set! passing-seq mips32-passing-seq)
       (set! acc mips32-acc)
       (set! stack-pointer mips32-stack-pointer)
       (set! frame-pointer mips32-frame-pointer)
       (set! emit-preamble mips32-emit-preamble)
       (set! emit-epilogue mips32-emit-epilogue)
       (set! emit-program-exit mips32-emit-program-exit)
       (set! emit-return mips32-emit-return)
       (set! emit-move mips32-emit-move)
       (set! emit-load mips32-emit-load)
       (set! emit-load-imm mips32-emit-load-imm)
       (set! emit-load-address mips32-emit-load-address)
       (set! emit-store mips32-emit-store)
       (set! emit-arith mips32-emit-arith)
       (set! emit-arith-imm mips32-emit-arith-imm)
       (set! emit-arith-operation mips32-emit-arith-operation)
       (set! emit-jump mips32-emit-jump)
       (set! emit-conditional mips32-emit-conditional)
       (set! emit-push mips32-emit-push)
       (set! emit-push-mem mips32-emit-push-mem)
       (set! emit-pop mips32-emit-pop)
       (set! emit-pop-mem mips32-emit-pop-mem)
       (set! emit-and mips32-emit-and)
       (set! emit-and-imm mips32-emit-and-imm)
       (set! emit-or mips32-emit-or)
       (set! emit-or-imm mips32-emit-or-imm)
       (set! emit-xor mips32-emit-xor)
       (set! emit-xor-imm mips32-emit-xor-imm)
       (set! emit-not mips32-emit-not)
       (set! emit-shift-left mips32-emit-shift-left)
       (set! emit-shift-right mips32-emit-shift-right)
       (set! emit-load-local mips32-emit-load-local)
       (set! emit-store-local mips32-emit-store-local)
       (set! emit-load-arg mips32-emit-load-arg)
       (set! emit-store-arg mips32-emit-store-arg)
       (set! emit-predicate-result mips32-emit-predicate-result)
       (set! emit-comparison-predicate mips32-emit-comparison-predicate))
    (else (error "ISA not supported"))))
